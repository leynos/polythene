[project]
name = "polythene"
version = "0.1.0"
description = "A tool for creating and managing containerised environments."
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Polythene Contributors"},
]
dependencies = [
    "cyclopts>=3.24,<4.0",
    "plumbum>=1.8,<2.0",
    "uuid6>=2025.0.1",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Build Tools",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-bdd",
]

[project.urls]
homepage = "https://github.com/leynos/polythene"
repository = "https://github.com/leynos/polythene"
issues = "https://github.com/leynos/polythene/issues"

[dependency-groups]
dev = [
    "polythene[test]",
    "ruff",
    "pyright",
    "pytest-timeout",
]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"polythene" = []

[tool.pyright]
pythonVersion = "3.13"
typeCheckingMode = "strict"
include = ["src", "tests"]
extraPaths = ["src"]

[tool.ruff]
line-length = 88

[tool.ruff.lint]
select = [
    "F",        # Pyflakes rules
    "W",        # PyCodeStyle warnings
    "E",        # PyCodeStyle errors
    "I",        # Sort imports properly
    "UP",       # Warn if certain things can changed due to newer Python versions
    "C4",       # Catch incorrect use of comprehensions, dict, list, etc
    "FA",       # Enforce from __future__ import annotations
    "ISC",      # Good use of string concatenation
    "ICN",      # Use common import conventions
    "RET",      # Good return practices
    "SIM",      # Common simplification rules
    "TID",      # Some good import practices
    "TC",       # Enforce importing certain types in a TYPE_CHECKING block
    "PTH",      # Use pathlib instead of os.path
    "TD",       # Be diligent with TODO comments
    "A",        # detect shadowed builtins
    "BLE",      # disallow catch-all exceptions
    "S",        # disallow things like "exec"; also restricts "assert" but I just NOQA it when I really need it
    "DTZ",      # require strict timezone manipulation with datetime
    "FBT",      # detect boolean traps
    "N",        # enforce naming conventions, e.g. ClassName vs function_name
    "FURB",
    "B",
    "RUF",
    "LOG",
    "Q",
    "PT",
    "RSE",
    "PERF",
    "TRY",
    "D",
    "ANN",
]
per-file-ignores = {"**/test_*.py" = ["S101"]}

[tool.ruff.lint.flake8-import-conventions]
# Declare the banned `from` imports.
banned-from = [
    "typing",
    "datetime",
    "collections.abc",
    "dataclasses",
    "enum",
    "unittest.mock",
    "msgspec",
]

[tool.ruff.lint.flake8-import-conventions.aliases]
# Declare the default aliases.
altair = "alt"
"matplotlib.pyplot" = "plt"
numpy = "np"
pandas = "pd"
seaborn = "sns"
scipy = "sp"
"collections.abc" = "cabc"
datetime = "dt"
"unittest.mock" = "mock"
"msgspec.json" = "msjson"
typing = "typ"

[tool.pytest.ini_options]
# Ensure asyncio fixtures create a new event loop for each test
asyncio_default_fixture_loop_scope = "function"
# Tests automatically killed after seconds elapsed
timeout = 30

[tool.uv]
package = true

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"
